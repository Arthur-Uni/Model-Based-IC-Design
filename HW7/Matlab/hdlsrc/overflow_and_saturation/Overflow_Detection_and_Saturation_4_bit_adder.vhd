-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\overflow_and_saturation\Overflow_Detection_and_Saturation_4_bit_adder.vhd
-- Created: 2018-11-05 12:31:08
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Overflow_Detection_and_Saturation_4_bit_adder
-- Source Path: overflow_and_saturation/Overflow Detection and Saturation 4 bit adder
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Overflow_Detection_and_Saturation_4_bit_adder IS
  PORT( In1                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        In2                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        Out1                              :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4
        );
END Overflow_Detection_and_Saturation_4_bit_adder;


ARCHITECTURE rtl OF Overflow_Detection_and_Saturation_4_bit_adder IS

  -- Component Declarations
  COMPONENT overflow_detection
    PORT( x                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          y                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          d                               :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT saturation_out
    PORT( x                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          y                               :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          d                               :   IN    std_logic;  -- ufix1
          z                               :   OUT   std_logic_vector(3 DOWNTO 0)  -- sfix4
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : overflow_detection
    USE ENTITY work.overflow_detection(rtl);

  FOR ALL : saturation_out
    USE ENTITY work.saturation_out(rtl);

  -- Signals
  SIGNAL d                                : std_logic;  -- ufix1
  SIGNAL In1_signed                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL In2_signed                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1                         : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL z                                : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL z_signed                         : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Multiport_Switch_out1            : signed(3 DOWNTO 0);  -- sfix4

BEGIN
  -- <S1>/overflow detection
  u_overflow_detection : overflow_detection
    PORT MAP( x => In1,  -- sfix4
              y => In2,  -- sfix4
              d => d  -- ufix1
              );

  -- <S1>/saturation out
  u_saturation_out : saturation_out
    PORT MAP( x => In1,  -- sfix4
              y => In2,  -- sfix4
              d => d,  -- ufix1
              z => z  -- sfix4
              );

  In1_signed <= signed(In1);

  In2_signed <= signed(In2);

  -- <S1>/Add
  Add_add_temp <= resize(In1_signed, 32) + resize(In2_signed, 32);
  Add_out1 <= Add_add_temp(3 DOWNTO 0);

  z_signed <= signed(z);

  -- <S1>/Multiport Switch
  
  Multiport_Switch_out1 <= Add_out1 WHEN d = '0' ELSE
      z_signed;

  Out1 <= std_logic_vector(Multiport_Switch_out1);

END rtl;

