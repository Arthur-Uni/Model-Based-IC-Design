-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\DirectForm_2016a\DirectForm.vhd
-- Created: 2018-10-26 20:54:41
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.1
-- Target subsystem base rate: 0.1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        0.1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DirectForm
-- Source Path: DirectForm_2016a/DirectForm
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DirectForm IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8_En5
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- sfix8_En5
        );
END DirectForm;


ARCHITECTURE rtl OF DirectForm IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Constant3_out1                   : unsigned(1 DOWNTO 0);  -- ufix2_En2
  SIGNAL In1_signed                       : signed(7 DOWNTO 0);  -- sfix8_En5
  SIGNAL Delay_out1                       : signed(7 DOWNTO 0);  -- sfix8_En5
  SIGNAL Delay1_out1                      : signed(7 DOWNTO 0);  -- sfix8_En5
  SIGNAL Constant2_out1                   : signed(2 DOWNTO 0);  -- sfix3_En2
  SIGNAL Constant1_out1                   : unsigned(2 DOWNTO 0);  -- ufix3_En3
  SIGNAL Product1_cast                    : signed(3 DOWNTO 0);  -- sfix4_En3
  SIGNAL Product1_mul_temp                : signed(11 DOWNTO 0);  -- sfix12_En8
  SIGNAL Product1_cast_1                  : signed(10 DOWNTO 0);  -- sfix11_En8
  SIGNAL Product1_out1                    : signed(7 DOWNTO 0);  -- sfix8_En7
  SIGNAL Constant_out1                    : std_logic;  -- ufix1_En1
  SIGNAL Delay2_out1                      : signed(7 DOWNTO 0);  -- sfix8_En5
  SIGNAL Product3_cast                    : signed(2 DOWNTO 0);  -- sfix3_En2
  SIGNAL Product3_mul_temp                : signed(10 DOWNTO 0);  -- sfix11_En7
  SIGNAL Product3_cast_1                  : signed(9 DOWNTO 0);  -- sfix10_En7
  SIGNAL Product3_out1                    : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Product2_mul_temp                : signed(10 DOWNTO 0);  -- sfix11_En7
  SIGNAL Product2_out1                    : signed(7 DOWNTO 0);  -- sfix8_En7
  SIGNAL Product_in0                      : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Product_cast                     : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Product_out1                     : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Add_add_cast                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add_add_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add_out1                         : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Add1_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add1_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add1_add_temp                    : signed(31 DOWNTO 0);  -- sfix32_En7
  SIGNAL Add1_out1                        : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Add2_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_add_temp                    : signed(31 DOWNTO 0);  -- sfix32_En6
  SIGNAL Add2_out1                        : signed(7 DOWNTO 0);  -- sfix8_En5

BEGIN
  -- <S1>/Constant3
  Constant3_out1 <= to_unsigned(16#3#, 2);

  In1_signed <= signed(In1);

  enb <= clk_enable;

  -- <S1>/Delay
  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= In1_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- <S1>/Delay1
  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- <S1>/Constant2
  Constant2_out1 <= to_signed(-16#1#, 3);

  -- <S1>/Constant1
  Constant1_out1 <= to_unsigned(16#1#, 3);

  -- <S1>/Product1
  Product1_cast <= signed(resize(Constant1_out1, 4));
  Product1_mul_temp <= Product1_cast * Delay_out1;
  Product1_cast_1 <= Product1_mul_temp(10 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(8 DOWNTO 1);

  -- <S1>/Constant
  Constant_out1 <= '1';

  -- <S1>/Delay2
  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  -- <S1>/Product3
  Product3_cast <= signed(resize(Constant3_out1, 3));
  Product3_mul_temp <= Product3_cast * Delay2_out1;
  Product3_cast_1 <= Product3_mul_temp(9 DOWNTO 0);
  Product3_out1 <= Product3_cast_1(8 DOWNTO 1);

  -- <S1>/Product2
  Product2_mul_temp <= Constant2_out1 * Delay1_out1;
  Product2_out1 <= Product2_mul_temp(7 DOWNTO 0);

  -- <S1>/Product
  
  Product_in0 <= In1_signed WHEN Constant_out1 = '1' ELSE
      to_signed(16#00#, 8);
  Product_cast <= resize(Product_in0, 9);
  Product_out1 <= Product_cast(7 DOWNTO 0);

  -- <S1>/Add
  Add_add_cast <= resize(Product1_out1, 32);
  Add_add_cast_1 <= resize(Product_out1 & '0', 32);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(8 DOWNTO 1);

  -- <S1>/Add1
  Add1_add_cast <= resize(Product2_out1, 32);
  Add1_add_cast_1 <= resize(Add_out1 & '0', 32);
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  Add1_out1 <= Add1_add_temp(8 DOWNTO 1);

  -- <S1>/Add2
  Add2_add_cast <= resize(Product3_out1, 32);
  Add2_add_cast_1 <= resize(Add1_out1, 32);
  Add2_add_temp <= Add2_add_cast + Add2_add_cast_1;
  Add2_out1 <= Add2_add_temp(8 DOWNTO 1);

  Out1 <= std_logic_vector(Add2_out1);

  ce_out <= clk_enable;

END rtl;

