-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CORDIC\CORDIC_cos_sin_tb.vhd
-- Created: 2018-11-13 04:30:48
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.4
-- Target subsystem base rate: 0.4
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.4
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- x_out                         ce_out        0.4
-- y_out                         ce_out        0.4
-- z_out                         ce_out        0.4
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CORDIC_cos_sin_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CORDIC_cos_sin_tb_pkg.ALL;

ENTITY CORDIC_cos_sin_tb IS
END CORDIC_cos_sin_tb;


ARCHITECTURE rtl OF CORDIC_cos_sin_tb IS

  -- Component Declarations
  COMPONENT CORDIC_cos_sin
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          y_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          z_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          ce_out                          :   OUT   std_logic;
          x_out                           :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En16
          y_out                           :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En16
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CORDIC_cos_sin
    USE ENTITY work.CORDIC_cos_sin(rtl);

  -- Constants
  CONSTANT x_out_expected_table_data      : vector_of_std_logic_vector22(0 TO 50) := 
    ("0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011",
     "0000001000000000001011");  -- ufix22 [51]
  CONSTANT y_out_expected_table_data      : vector_of_std_logic_vector22(0 TO 50) := 
    ("0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "0000000000000000000000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000",
     "1111110010001001010000");  -- ufix22 [51]
  CONSTANT z_out_expected_table_data      : vector_of_std_logic_vector32(0 TO 50) := 
    (X"00000000",
     X"00000000",
     X"FFFFFFF0",
     X"00000010",
     X"FFFFFFD0",
     X"00000030",
     X"FFFFFF90",
     X"00000070",
     X"FFFFFF10",
     X"000000F0",
     X"FFFFFE10",
     X"000001F0",
     X"FFFFFC10",
     X"000003F0",
     X"FFFFF810",
     X"000007F0",
     X"FFFFF013",
     X"00000FED",
     X"FFFFE028",
     X"00001FD8",
     X"FFFFC0CD",
     X"00003B53",
     X"000003DA",
     X"FFFF8574",
     X"00008604",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA",
     X"FFFFFFFA");  -- ufix32 [51]

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL rawData_x_in                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL rawData_y_in                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL rawData_z_in                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL z_out_done                       : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL z_out_done_enb                   : std_logic;  -- ufix1
  SIGNAL x_out_addr                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL z_out_lastAddr                   : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check3_done                      : std_logic;  -- ufix1
  SIGNAL y_out_done                       : std_logic;  -- ufix1
  SIGNAL y_out_done_enb                   : std_logic;  -- ufix1
  SIGNAL y_out_lastAddr                   : std_logic;  -- ufix1
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL x_out_done                       : std_logic;  -- ufix1
  SIGNAL x_out_done_enb                   : std_logic;  -- ufix1
  SIGNAL x_out_active                     : std_logic;  -- ufix1
  SIGNAL holdData_z_in                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL z_in_offset                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL z_in_1                           : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL z_in_2                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL holdData_y_in                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL y_in_offset                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL y_in_1                           : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL y_in_2                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL holdData_x_in                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL x_in_offset                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL x_in_1                           : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL x_in_2                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL x_out                            : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL y_out                            : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL z_out                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL x_out_enb                        : std_logic;  -- ufix1
  SIGNAL x_out_lastAddr                   : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL x_out_signed                     : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL x_out_expected_1                 : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL x_out_expected_2                 : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL x_out_ref                        : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL x_out_testFailure                : std_logic;  -- ufix1
  SIGNAL y_out_signed                     : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL y_out_expected_1                 : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL y_out_expected_2                 : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL y_out_ref                        : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL y_out_testFailure                : std_logic;  -- ufix1
  SIGNAL z_out_signed                     : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL z_out_expected_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL z_out_expected_2                 : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL z_out_ref                        : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL z_out_testFailure                : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_CORDIC_cos_sin : CORDIC_cos_sin
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              x_in => x_in_2,  -- sfix17_En14
              y_in => y_in_2,  -- sfix17_En14
              z_in => z_in_2,  -- sfix17_En14
              ce_out => ce_out,
              x_out => x_out,  -- sfix22_En16
              y_out => y_out,  -- sfix22_En16
              z_out => z_out  -- sfix32_En15
              );

  -- Data source for x_in
  rawData_x_in <= to_signed(16#04000#, 17);

  -- Data source for y_in
  rawData_y_in <= to_signed(16#00000#, 17);

  -- Data source for z_in
  rawData_z_in <= to_signed(-16#04305#, 17);

  z_out_done_enb <= z_out_done AND rdEnb;

  
  z_out_lastAddr <= '1' WHEN x_out_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  z_out_done <= z_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check3_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF z_out_done_enb = '1' THEN
        check3_done <= z_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_3_process;

  y_out_done_enb <= y_out_done AND rdEnb;

  
  y_out_lastAddr <= '1' WHEN x_out_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  y_out_done <= y_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF y_out_done_enb = '1' THEN
        check2_done <= y_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  x_out_done_enb <= x_out_done AND rdEnb;

  
  x_out_active <= '1' WHEN x_out_addr /= to_unsigned(16#32#, 6) ELSE
      '0';

  -- holdData reg for Constant2_out1
  stimuli_Constant2_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_z_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_z_in <= rawData_z_in;
    END IF;
  END PROCESS stimuli_Constant2_out1_process;

  stimuli_Constant2_out1_1: PROCESS (rawData_z_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      z_in_offset <= holdData_z_in;
    ELSE
      z_in_offset <= rawData_z_in;
    END IF;
  END PROCESS stimuli_Constant2_out1_1;

  z_in_1 <= z_in_offset AFTER 2 ns;

  z_in_2 <= std_logic_vector(z_in_1);

  -- holdData reg for Constant1_out1
  stimuli_Constant1_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_y_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_y_in <= rawData_y_in;
    END IF;
  END PROCESS stimuli_Constant1_out1_process;

  stimuli_Constant1_out1_1: PROCESS (rawData_y_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      y_in_offset <= holdData_y_in;
    ELSE
      y_in_offset <= rawData_y_in;
    END IF;
  END PROCESS stimuli_Constant1_out1_1;

  y_in_1 <= y_in_offset AFTER 2 ns;

  y_in_2 <= std_logic_vector(y_in_1);

  -- holdData reg for Constant_out1
  stimuli_Constant_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_x_in <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_x_in <= rawData_x_in;
    END IF;
  END PROCESS stimuli_Constant_out1_process;

  stimuli_Constant_out1_1: PROCESS (rawData_x_in, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      x_in_offset <= holdData_x_in;
    ELSE
      x_in_offset <= rawData_x_in;
    END IF;
  END PROCESS stimuli_Constant_out1_1;

  x_in_1 <= x_in_offset AFTER 2 ns;

  x_in_2 <= std_logic_vector(x_in_1);

  snkDonen <=  NOT snkDone;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN snkDone = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  x_out_enb <= ce_out AND x_out_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x_out_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF x_out_enb = '1' THEN
        IF x_out_addr = to_unsigned(16#32#, 6) THEN 
          x_out_addr <= to_unsigned(16#00#, 6);
        ELSE 
          x_out_addr <= x_out_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  x_out_lastAddr <= '1' WHEN x_out_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  x_out_done <= x_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF x_out_done_enb = '1' THEN
        check1_done <= x_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check3_done AND (check1_done AND check2_done);

  x_out_signed <= signed(x_out);

  -- Data source for x_out_expected
  x_out_expected_1 <= x_out_expected_table_data(to_integer(x_out_addr));

  x_out_expected_2 <= signed(x_out_expected_1);

  x_out_ref <= x_out_expected_2;

  x_out_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND x_out_signed /= x_out_ref THEN
        x_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in x_out_signed: Expected " & to_hex(x_out_ref) & (" Actual " & to_hex(x_out_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS x_out_signed_checker;

  y_out_signed <= signed(y_out);

  -- Data source for y_out_expected
  y_out_expected_1 <= y_out_expected_table_data(to_integer(x_out_addr));

  y_out_expected_2 <= signed(y_out_expected_1);

  y_out_ref <= y_out_expected_2;

  y_out_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND y_out_signed /= y_out_ref THEN
        y_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in y_out_signed: Expected " & to_hex(y_out_ref) & (" Actual " & to_hex(y_out_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS y_out_signed_checker;

  z_out_signed <= signed(z_out);

  -- Data source for z_out_expected
  z_out_expected_1 <= z_out_expected_table_data(to_integer(x_out_addr));

  z_out_expected_2 <= signed(z_out_expected_1);

  z_out_ref <= z_out_expected_2;

  z_out_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND z_out_signed /= z_out_ref THEN
        z_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in z_out_signed: Expected " & to_hex(z_out_ref) & (" Actual " & to_hex(z_out_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS z_out_signed_checker;

  testFailure <= z_out_testFailure OR (x_out_testFailure OR y_out_testFailure);

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

