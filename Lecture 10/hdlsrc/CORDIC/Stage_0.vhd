-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CORDIC\Stage_0.vhd
-- Created: 2018-11-13 04:29:09
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Stage_0
-- Source Path: CORDIC/CORDIC_cos_sin/Stage_0
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Stage_0 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        y_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        z_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        x_out                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        y_out                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
        z_out                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
        );
END Stage_0;


ARCHITECTURE rtl OF Stage_0 IS

  -- Component Declarations
  COMPONENT Shift_Sel1
    PORT( in_rsvd                         :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          sel                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En14
          );
  END COMPONENT;

  COMPONENT Shift_Sel
    PORT( in_rsvd                         :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          sel                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En14
          );
  END COMPONENT;

  COMPONENT Phase_Sel
    PORT( sel                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Shift_Sel1
    USE ENTITY work.Shift_Sel1(rtl);

  FOR ALL : Shift_Sel
    USE ENTITY work.Shift_Sel(rtl);

  FOR ALL : Phase_Sel
    USE ENTITY work.Phase_Sel(rtl);

  -- Signals
  SIGNAL x_in_signed                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay_out1                       : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL y_in_signed                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay1_out1                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL z_in_signed                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Constant_out1                    : std_logic;  -- ufix1
  SIGNAL Relational_Operator1_1_cast      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Shift_Sel1_out1                  : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Shift_Sel1_out1_signed           : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add_sub_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Shift_Sel_out1                   : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Shift_Sel_out1_signed            : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add1_add_cast                    : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add1_add_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Delay5_out1                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Phase_Sel_out1                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Phase_Sel_out1_signed            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Add2_sub_cast                    : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add2_sub_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Add2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En15

BEGIN
  -- <S2>/Shift_Sel1
  u_Shift_Sel1 : Shift_Sel1
    PORT MAP( in_rsvd => std_logic_vector(Delay1_out1),  -- sfix17_En14
              sel => Relational_Operator1_relop1,
              out_rsvd => Shift_Sel1_out1  -- sfix17_En14
              );

  -- <S2>/Shift_Sel
  u_Shift_Sel : Shift_Sel
    PORT MAP( in_rsvd => std_logic_vector(Delay_out1),  -- sfix17_En14
              sel => Relational_Operator1_relop1,
              out_rsvd => Shift_Sel_out1  -- sfix17_En14
              );

  -- <S2>/Phase_Sel
  u_Phase_Sel : Phase_Sel
    PORT MAP( sel => Relational_Operator1_relop1,
              out_rsvd => Phase_Sel_out1  -- sfix16_En15
              );

  x_in_signed <= signed(x_in);

  -- <S2>/Delay
  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= x_in_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  y_in_signed <= signed(y_in);

  -- <S2>/Delay1
  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= y_in_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  z_in_signed <= signed(z_in);

  -- <S2>/Constant
  Constant_out1 <= '0';

  -- <S2>/Relational Operator1
  Relational_Operator1_1_cast <= signed(resize(unsigned'(Constant_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 17));
  
  Relational_Operator1_relop1 <= '1' WHEN z_in_signed >= Relational_Operator1_1_cast ELSE
      '0';

  Shift_Sel1_out1_signed <= signed(Shift_Sel1_out1);

  -- <S2>/Add
  Add_sub_cast <= resize(Delay_out1, 32);
  Add_sub_cast_1 <= resize(Shift_Sel1_out1_signed, 32);
  Add_out1 <= Add_sub_cast - Add_sub_cast_1;

  -- <S2>/Delay2
  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  x_out <= std_logic_vector(Delay2_out1);

  Shift_Sel_out1_signed <= signed(Shift_Sel_out1);

  -- <S2>/Add1
  Add1_add_cast <= resize(Shift_Sel_out1_signed, 32);
  Add1_add_cast_1 <= resize(Delay1_out1, 32);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  -- <S2>/Delay3
  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  y_out <= std_logic_vector(Delay3_out1);

  -- <S2>/Delay5
  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= z_in_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Phase_Sel_out1_signed <= signed(Phase_Sel_out1);

  -- <S2>/Add2
  Add2_sub_cast <= resize(Delay5_out1 & '0', 32);
  Add2_sub_cast_1 <= resize(Phase_Sel_out1_signed, 32);
  Add2_out1 <= Add2_sub_cast - Add2_sub_cast_1;

  -- <S2>/Delay4
  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  z_out <= std_logic_vector(Delay4_out1);

END rtl;

