-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CORDIC\CORDIC_cos_sin.vhd
-- Created: 2018-11-13 04:29:10
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.4
-- Target subsystem base rate: 0.4
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.4
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- x_out                         ce_out        0.4
-- y_out                         ce_out        0.4
-- z_out                         ce_out        0.4
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CORDIC_cos_sin
-- Source Path: CORDIC/CORDIC_cos_sin
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CORDIC_cos_sin IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        y_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        z_in                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        ce_out                            :   OUT   std_logic;
        x_out                             :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En16
        y_out                             :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22_En16
        z_out                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
        );
END CORDIC_cos_sin;


ARCHITECTURE rtl OF CORDIC_cos_sin IS

  -- Component Declarations
  COMPONENT Stage_0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          y_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          z_in                            :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  COMPONENT Stage_11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          x_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En15
          x_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          y_out                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En14
          z_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Stage_0
    USE ENTITY work.Stage_0(rtl);

  FOR ALL : Stage_1
    USE ENTITY work.Stage_1(rtl);

  FOR ALL : Stage_2
    USE ENTITY work.Stage_2(rtl);

  FOR ALL : Stage_3
    USE ENTITY work.Stage_3(rtl);

  FOR ALL : Stage_4
    USE ENTITY work.Stage_4(rtl);

  FOR ALL : Stage_5
    USE ENTITY work.Stage_5(rtl);

  FOR ALL : Stage_6
    USE ENTITY work.Stage_6(rtl);

  FOR ALL : Stage_7
    USE ENTITY work.Stage_7(rtl);

  FOR ALL : Stage_8
    USE ENTITY work.Stage_8(rtl);

  FOR ALL : Stage_9
    USE ENTITY work.Stage_9(rtl);

  FOR ALL : Stage_10
    USE ENTITY work.Stage_10(rtl);

  FOR ALL : Stage_11
    USE ENTITY work.Stage_11(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Stage_0_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_0_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_0_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_1_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_1_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_2_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_2_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_3_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_3_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_4_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_4_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_5_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_5_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_6_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_6_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_6_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_7_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_7_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_7_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_8_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_8_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_8_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_9_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_9_out2                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_9_out3                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_10_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_10_out2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_10_out3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_11_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_11_out2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_11_out3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Stage_11_out1_signed             : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL Product_cast                     : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL Product_mul_temp                 : signed(64 DOWNTO 0);  -- sfix65_En46
  SIGNAL Product_out1                     : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL Data_Type_Conversion_out1        : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL Stage_11_out2_signed             : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Product1_cast                    : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL Product1_mul_temp                : signed(64 DOWNTO 0);  -- sfix65_En46
  SIGNAL Product1_out1                    : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL Data_Type_Conversion1_out1       : signed(21 DOWNTO 0);  -- sfix22_En16
  SIGNAL Stage_11_out3_signed             : signed(31 DOWNTO 0);  -- sfix32_En15
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En15

BEGIN
  -- <S1>/Stage_0
  u_Stage_0 : Stage_0
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => x_in,  -- sfix17_En14
              y_in => y_in,  -- sfix17_En14
              z_in => z_in,  -- sfix17_En14
              x_out => Stage_0_out1,  -- sfix32_En14
              y_out => Stage_0_out2,  -- sfix32_En14
              z_out => Stage_0_out3  -- sfix32_En15
              );

  -- <S1>/Stage_1
  u_Stage_1 : Stage_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_0_out1,  -- sfix32_En14
              y_in => Stage_0_out2,  -- sfix32_En14
              z_in => Stage_0_out3,  -- sfix32_En15
              x_out => Stage_1_out1,  -- sfix32_En14
              y_out => Stage_1_out2,  -- sfix32_En14
              z_out => Stage_1_out3  -- sfix32_En15
              );

  -- <S1>/Stage_2
  u_Stage_2 : Stage_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_1_out1,  -- sfix32_En14
              y_in => Stage_1_out2,  -- sfix32_En14
              z_in => Stage_1_out3,  -- sfix32_En15
              x_out => Stage_2_out1,  -- sfix32_En14
              y_out => Stage_2_out2,  -- sfix32_En14
              z_out => Stage_2_out3  -- sfix32_En15
              );

  -- <S1>/Stage_3
  u_Stage_3 : Stage_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_2_out1,  -- sfix32_En14
              y_in => Stage_2_out2,  -- sfix32_En14
              z_in => Stage_2_out3,  -- sfix32_En15
              x_out => Stage_3_out1,  -- sfix32_En14
              y_out => Stage_3_out2,  -- sfix32_En14
              z_out => Stage_3_out3  -- sfix32_En15
              );

  -- <S1>/Stage_4
  u_Stage_4 : Stage_4
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_3_out1,  -- sfix32_En14
              y_in => Stage_3_out2,  -- sfix32_En14
              z_in => Stage_3_out3,  -- sfix32_En15
              x_out => Stage_4_out1,  -- sfix32_En14
              y_out => Stage_4_out2,  -- sfix32_En14
              z_out => Stage_4_out3  -- sfix32_En15
              );

  -- <S1>/Stage_5
  u_Stage_5 : Stage_5
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_4_out1,  -- sfix32_En14
              y_in => Stage_4_out2,  -- sfix32_En14
              z_in => Stage_4_out3,  -- sfix32_En15
              x_out => Stage_5_out1,  -- sfix32_En14
              y_out => Stage_5_out2,  -- sfix32_En14
              z_out => Stage_5_out3  -- sfix32_En15
              );

  -- <S1>/Stage_6
  u_Stage_6 : Stage_6
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_5_out1,  -- sfix32_En14
              y_in => Stage_5_out2,  -- sfix32_En14
              z_in => Stage_5_out3,  -- sfix32_En15
              x_out => Stage_6_out1,  -- sfix32_En14
              y_out => Stage_6_out2,  -- sfix32_En14
              z_out => Stage_6_out3  -- sfix32_En15
              );

  -- <S1>/Stage_7
  u_Stage_7 : Stage_7
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_6_out1,  -- sfix32_En14
              y_in => Stage_6_out2,  -- sfix32_En14
              z_in => Stage_6_out3,  -- sfix32_En15
              x_out => Stage_7_out1,  -- sfix32_En14
              y_out => Stage_7_out2,  -- sfix32_En14
              z_out => Stage_7_out3  -- sfix32_En15
              );

  -- <S1>/Stage_8
  u_Stage_8 : Stage_8
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_7_out1,  -- sfix32_En14
              y_in => Stage_7_out2,  -- sfix32_En14
              z_in => Stage_7_out3,  -- sfix32_En15
              x_out => Stage_8_out1,  -- sfix32_En14
              y_out => Stage_8_out2,  -- sfix32_En14
              z_out => Stage_8_out3  -- sfix32_En15
              );

  -- <S1>/Stage_9
  u_Stage_9 : Stage_9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_8_out1,  -- sfix32_En14
              y_in => Stage_8_out2,  -- sfix32_En14
              z_in => Stage_8_out3,  -- sfix32_En15
              x_out => Stage_9_out1,  -- sfix32_En14
              y_out => Stage_9_out2,  -- sfix32_En14
              z_out => Stage_9_out3  -- sfix32_En15
              );

  -- <S1>/Stage_10
  u_Stage_10 : Stage_10
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_9_out1,  -- sfix32_En14
              y_in => Stage_9_out2,  -- sfix32_En14
              z_in => Stage_9_out3,  -- sfix32_En15
              x_out => Stage_10_out1,  -- sfix32_En14
              y_out => Stage_10_out2,  -- sfix32_En14
              z_out => Stage_10_out3  -- sfix32_En15
              );

  -- <S1>/Stage_11
  u_Stage_11 : Stage_11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              x_in => Stage_10_out1,  -- sfix32_En14
              y_in => Stage_10_out2,  -- sfix32_En14
              z_in => Stage_10_out3,  -- sfix32_En15
              x_out => Stage_11_out1,  -- sfix32_En14
              y_out => Stage_11_out2,  -- sfix32_En14
              z_out => Stage_11_out3  -- sfix32_En15
              );

  Stage_11_out1_signed <= signed(Stage_11_out1);

  -- <S1>/Constant
  Constant_out1 <= unsigned'(X"9B74EE10");

  -- <S1>/Product
  Product_cast <= signed(resize(Constant_out1, 33));
  Product_mul_temp <= Stage_11_out1_signed * Product_cast;
  Product_out1 <= Product_mul_temp(63 DOWNTO 0);

  -- <S1>/Data Type Conversion
  Data_Type_Conversion_out1 <= Product_out1(51 DOWNTO 30);

  x_out <= std_logic_vector(Data_Type_Conversion_out1);

  Stage_11_out2_signed <= signed(Stage_11_out2);

  -- <S1>/Product1
  Product1_cast <= signed(resize(Constant_out1, 33));
  Product1_mul_temp <= Product1_cast * Stage_11_out2_signed;
  Product1_out1 <= Product1_mul_temp(63 DOWNTO 0);

  -- <S1>/Data Type Conversion1
  Data_Type_Conversion1_out1 <= Product1_out1(51 DOWNTO 30);

  y_out <= std_logic_vector(Data_Type_Conversion1_out1);

  Stage_11_out3_signed <= signed(Stage_11_out3);

  enb <= clk_enable;

  -- <S1>/Delay
  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Stage_11_out3_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  z_out <= std_logic_vector(Delay_out1);

  ce_out <= clk_enable;

  -- <S1>/Scope

  -- <S1>/Scope1

  -- <S1>/Scope2

END rtl;

