-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\BER_calc\Controller.vhd
-- Created: 2018-11-06 03:57:35
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Enable                        ce_out        1
-- Reset_1                       ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Controller
-- Source Path: Controller
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Addr                              :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17
        ce_out                            :   OUT   std_logic;
        Enable                            :   OUT   std_logic;
        Reset_1                           :   OUT   std_logic
        );
END Controller;


ARCHITECTURE rtl OF Controller IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Addr_signed                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Constant_out1                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator_1_cast       : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Constant1_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator1_1_cast      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Constant2_out1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator2_1_cast      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  Addr_signed <= signed(Addr);

  -- <S2>/Constant
  Constant_out1 <= to_unsigned(16#001#, 10);

  -- <S2>/Relational Operator
  Relational_Operator_1_cast <= signed(resize(Constant_out1, 17));
  
  Relational_Operator_relop1 <= '1' WHEN Addr_signed >= Relational_Operator_1_cast ELSE
      '0';

  enb <= clk_enable;

  -- <S2>/Delay
  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- <S2>/Constant1
  Constant1_out1 <= to_unsigned(16#080#, 10);

  -- <S2>/Relational Operator1
  Relational_Operator1_1_cast <= signed(resize(Constant1_out1, 17));
  
  Relational_Operator1_relop1 <= '1' WHEN Addr_signed <= Relational_Operator1_1_cast ELSE
      '0';

  -- <S2>/Delay1
  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Relational_Operator1_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- <S2>/Logical Operator
  Logical_Operator_out1 <= Delay_out1 AND Delay1_out1;

  -- <S2>/Delay3
  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Logical_Operator_out1;
        Delay3_reg(1 TO 3) <= Delay3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(3);

  -- <S2>/Constant2
  Constant2_out1 <= to_unsigned(16#0FF#, 10);

  -- <S2>/Relational Operator2
  Relational_Operator2_1_cast <= signed(resize(Constant2_out1, 17));
  
  Relational_Operator2_relop1 <= '1' WHEN Addr_signed = Relational_Operator2_1_cast ELSE
      '0';

  -- <S2>/Delay2
  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Relational_Operator2_relop1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  ce_out <= clk_enable;

  Enable <= Delay3_out1;

  Reset_1 <= Delay2_out1;

END rtl;

